Collision detction:

Du skal nu tilføje 'collision detection'. Dette skal bruges til at sørge for at man f.eks. ikke kan stå oven i mure. Dette skal implementeres som en del af move metoden i player klassen.
Dette gøres nemest ved at udnytte pygames biblioteker.

Du skal bruge:
pygame.sprite.spritecollide
http://www.pygame.org/docs/ref/sprite.html#pygame.sprite.spritecollide

Overvej hvor og hvornår den skal bruges.

Udnyt len, gem oprindeligt rect. Udnyttes i flere klasser.

Hints:
Du skal specifikt sørge for at spilleren ikke kan gå ind i mure. Hvilke argumenter skal spritecollide bruge?
Hvordan sørger du for at der ikke er flere end 1 sprite i et område?
Kan du bruge len?


Map loader

Opret nyt kodefragment og importer data+model?

Du skal nu kode en level processer. Tanken er at du skal kunne oprette egne baner, blot ved at rette i en tekst fil. Kig i mappen maps og åben den allerede oprettede bane map0.txt. Som du kan se bruges # for murer, de mindre intuitive er @ for spilleren, M for monstere og x for guld.

For at lave en bane ud fra dette, skal du få python til at løbe igennem alle tegnene og oprette objekter, hvor det hører sig. 

Du skal udregne, hvor mange tegn der kan bruges ved at udnytte tile størrelsen og map height/width.

Det nemmeste er, hvis du deler det op i tre funktioner. En funktion der alt efter de brugte tegn, indsætter objekter. En funktion, som læser hvert tegn i en linje og en funktion, som går igennem alle linjerne.

Hints: 
Brug range. 
elif er nyttig
Når den har læst et tegn, skal den bruge koordinaterne, til at sætte objektet ind det rigtige sted. 
