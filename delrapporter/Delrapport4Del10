Artiklen "Designing the Handheld Maritime Communicator" handler om processen som omfattede at
lave et system som ville være ansvarlig for at sørge for sikkerheden når risikabelt arbejde skulle udføres 
i store fragtskibe. Artiklen går i dybde med dette, hvor den beskriver alle trinene bag systemet, fra 
udformningen af systemet, til interviews med klientellet, indsamlingen af det information som skulle 
bruges, designet af systemet, og til sidst den måde som designerne af systemet besluttede at teste systemet, 
(både brugertests og bugtesting). Fremgangsmåden som programmørerne brugte til at designe systemet vil blive 
analyseret samt sammenlignet med kursuslitteraturen.

I stedet for interviews med deres klientel tog nogle medlemmer af holdet med på nogle af skibene for længere perioder, 
(Det siges ikke hvor længe), hvor de tog noter om hvordan opgaver var klaret, (som for eksempel hvis sømændene skulle 
få deres last om bord på skibet). Ud over dette tog de også noter om problemer med den måde som sømændene klarede 
disse problemer på, som så skulle løses. Holdet tog også lyd-og-video analyser, hvor de tog lyd segmenter eller 
video segmenter fra om bord på et skib, og kiggede dem igennem. Dette var gjort så at holdet kunne få en bedre 
idé om forholdene på skibene, samt også for at se hvilken ordrer der blev typisk givet. Deres plan var at bruge disse 
til at kunne lave forprogrammerede kommandoer. Denne måde som holdet brugte til at få information vedrørende det 
det system som deres kunde havde brug for er meget anderledes end den metode som Back to Thinking Mode havde 
argumenteret for, hvor man skulle have adskillige interviews med sin kunde, hvor man skulle føre en dagbog. Her brugte 
man hovedsageligt et 'action-reaction' type format. Dog kan man argumentere at denne fremgangsmåde 
ville ikke virke for dette projekt, da holdet havde brug for at have en klar idé om hvad arbejderne havde brug for, og 
ikke hvad deres chefer havde brug for, samt hvis de havde foretaget interviews i stedet for feltarbejde ville holdet ikke 
få at vide hvilken kommandoer var typisk givet fra kaptajnen eller lignende højrestående arbejdere.

Mens systemet stadig var i koncept-fasen lavede holdet et klassediagram og et papir mockup om systemet for at vise 
hvordan systemet skulle virke. Klassediagrammer er et udbredt fænomen i større projekter, som er beskrevet i bogen 
"Objekt Orienteret Analyse & Design", som er brugt til at give et samlet overblik over problemområdet, hvilket 
er nyttigt for dette system da systemet skulle kunne holde styr på skibbet, opgaverne og det team som skulle 
udføre disse opgaver. Klassediagrammer er effektive da de hjælper med at holde et overblik over systemet, og 
også til at hjælpe folk med at se hvilken klasser har hvilken effekt på hvilken klasser. Papir mockups, som også 
er diskuteret i "Cardboard Computers: Mockingit-up or Hands-on the Future", hjælper med at få folk til at forstå 
hvilken grænseflader holdet syntes vil være den bedste IT-løsning. Dette er en effektiv måde at vise et holds kunder 
hvilken grænseflader de syntes vil være effektive, da de er hurtigere at lave i forhold til at lave prototyper, hvilket 
betyder at et hold kan eksperimentere med forskellige design. Og da dette systems design er altafgørende, (da systemet 
skulle være nemt og hurtigt at bruge for arbejderne), var det en umådelig god idé at lave forskellige papir mockups i stedet 
for at lave mange forskellige prototyper.

Holdet som designede systemet brugte et såkaldt 'iterativ design'. Iterativ design fungerer ved at holdet 
laver en prototype. Denne prototype bliver så testet, analyseret og refineret, hvorefter holdet kigger 
på hvad der skal laves om eller skal ændres. Disse ændringer bliver inkluderet i en ny prototype, som gennemgår 
de samme trin som før indtil man har et færdigt produkt. Denne form for design er meget anderledes end et 
traditionelt vandfaldsmodel, (hvor man antager at hvert trin bliver udført perfekt, og skal ikke ændres), eller et 
spiralmodel, (fra "A Spiral Model of Software Development and Enhancement"), hvor man lavede en prototype  
for hver gang man havde startet et nyt trin. Selvom et iterativ design er mere tidskrævende en et 
vandfaldsmodel eller et spiralmodel, vil et iterativ design sørge for at når systemet bliver udleveret 
vil der være færre bugs, problemer og ueffektive designelementer. Dette er meget vigtigt for et sikkerhedssystem, 
da det kan koste liv hvis der sker en fejl. Artiklen "Designing for Usability: Key Principles and What The Designers 
Think" er enig med at et iterativt design er den mest effektive designproces, da et iterativt designproces vil eventuelt 
finde mange, hvis ikke alle, designproblemer, som for eksempel tvetydige beskeder. Artiklen give endda et eksempel 
på et problem som et hold havde, hvor brugerne misforstod nogle af de kommandoer som de kunne bruge, som iterativt design 
rettede op på. Tvetydige kommandoer eller funktioner ville have været et stort problem for projektet for brugerne, så 
det var en god idé at bruge et iterativt designproces til systemet.
